:class project

    :field public data
    :field public file
    :field public stock
    :field private method← 1 1 2 1 1 2 1 1 2 3 1 1 2 1 1 2 1 1 2 3 4
    :field private lumpSize←20   ⍝ how many new words to add to 1?

    nl←⎕ucs 13

    ∇ make arg
      :Implements constructor
      :Access public
      file←arg
      :If ⎕NEXISTS file
          data←⎕JSON 1⊃⎕NGET file
          sf←data.stock
          :If ~∨/'\/'∊sf
              sf←(1⊃⎕NPARTS file),sf
          :EndIf
          :If ⎕NEXISTS sf
              stock←⎕JSON 1⊃⎕NGET sf
          :EndIf
      :Else
          data←⎕NS''
          data.stock←''
          data.direction←1
          data.progress←1
          data.stats←,⎕NS''
          data.stats[1].(id fach)←1
          stock←⎕NS''
          ((⎕JSON⍠'Compact' 0)data)⎕NPUT file 1
          ⎕←'Initialized data-file ',file,' please edit config!'
      :EndIf
    ∇

    ∇ R←info
      :Access public
      R←⊂'Lernprojekt: ',file
      R,←⊂'nutzt Vokabular: ',data.stock,' (',('lernt ',data.direction⊃'Fremdsprache' 'Rückübersetzung'),')'
      R,←⊂'Fortschritt: ',⍕data.progress
      :If 326≠⎕DR data.stats   ⍝ variable (namespace=9)
          R,←⊂'Karten je Fach (incl. F0/5): ',¯2↓∊(⍕¨(≢stock.cards.id),0 0 0 0 0),¨⊂' | '
      :Else
          R,←⊂'Karten je Fach (incl. F0/5): ',¯2↓∊(⍕¨(+/~stock.cards.id∊data.stats.id),+⌿data.stats.fach∘.=⍳5),¨⊂' | '
      :EndIf
      R,←⊂'Heute zu lernendes Fach: ',⍕method[data.progress]
     
    ∇



    ∇ Tageslektion;z;loop;ok;lektion;i;word;sink
      :Access public
      lektion←heuteLernen
      ok←0×lektion
      loop←1
      :While 0∊ok
          (⍕loop),'. Durchlauf, ',(⍕+/~ok),' Vokabeln'
          loop+←1
          :For i :In ⍸~ok
              word←stock.cards[idx←stock.cards.id⍳lektion[i]]
              40⍴⎕UCS 13     ⍝ CLS ;)
              ⎕←word.h
              sink←⍞
              ⍞←word.f
              ⍝ anzeigen
              ⍝ gewusst         oder   nicht
     ask:
              ⎕←'Gewusst oder nicht? (1/0/q/i)'
              z←⍞
              →(∨/z∊'Qq')/0
              :If 'i'∊z
                  ⎕←1↑¯2↑info
                  →ask
              :EndIf
              z←⊃(//)⎕VFI z
              :If (≢data.stats.id)<s←data.stats.id⍳lektion[i]
                  new←⎕NS'' ⋄ new.id←i ⋄ new.fach←data.progress
              :EndIf
              :If (,1)≡,z
                  data.stats[s].fach+←1
              :Else
                  data.stats[s].fach←1  ⍝ zurück nach1 !
              :EndIf
              ok[i]←z∨fach>1
          :EndFor
      :EndWhile
      data.progress+←1
      saveData
      ⎕←'Lektion beendet.'
    ∇

    ∇ R←heuteLernen;missing;new
      :Access public
    ⍝ ermittle ids der heute zu lernenden Vokabeln
      R←⍬
      :If 326≠⎕DR data.stats
          missing←stock.cards.id
      :Else
          missing←(~stock.cards.id∊data.stats.id)/stock.cards.id
      :EndIf
      fach←method[data.progress]
      new←(fach=1)/missing[(lumpSize⌊≢missing)?≢missing]
      :If 326=⎕DR data.stats
          R←(fach=data.stats.fach)/data.stats.id
          R←R[?⍨≢R]
      :EndIf
      R←R,new
      :If 0<≢new
          data.stats⍪←{n←⎕NS'' ⋄ n.id←⍵ ⋄ n.fach←1 ⋄ n}¨new
      :EndIf
    ∇

    ∇ saveData
      :Access public
      ((⎕JSON⍠'Compact' 0)data)⎕NPUT file 1
    ∇
:endclass
